doctype html
html
  head
    meta(charset="UTF-8")
    title= title
    link(rel="stylesheet", href="/stylesheets/home.css")
  body
   

    .explore-container
      // LEFT NAVIGATION (unchanged)
      nav.left-nav
        h2.logo Peerly
        ul.nav-list
          li.nav-item
            .icon-circle ℹ
            a(href="/api/home") Home
          li.nav-item 
            .icon-circle ℹ
            a(href="/api/users") Explore
          li.nav-item 
            .icon-circle ℹ
            span Messages
          li.nav-item 
            .icon-circle ℹ
            span Notifications
          li.nav-item
            .icon-circle ℹ
            if sessionUserId
              a(href=`/api/users/${sessionUserId}`) Profile
          li.nav-item
            .icon-circle ℹ
            if sessionUserId
              a(href=`/api/users/${sessionUserId}/settings`) Settings
        button.post-btn(onclick="window.location.href='/api/home/create/Post'") Post

        // Logged in user info at the bottom of left nav
        .logged-in
          if sessionProfilePic
            .avatar-circle.logged-in-avatar
              img(src=sessionProfilePic, alt="User Avatar")
          else if sessionUserId
            .avatar-circle.logged-in-avatar
              // Fallback: display first character of the sessionUserId
              | #{sessionUserId[0]}
          if sessionUserId
            span #{sessionUserId}
          else
            span Not logged in.


      // MIDDLE CONTENT
      main.main-feed
        .top-bar
          .tag-buttons
            each tag in tags || []
              button.tag-btn(onclick=`window.location.replace('/api/tags/tags?tags=${tag.tag_id}')`)= tag.tag_name
          button.filter-btn Filters

        // Posts container
        .post-grid
          if posts && posts.length > 0
            each post in posts
              a.post-card(href=`/api/home/${post.post_id}`, style="display: block; text-decoration: none; color: inherit; cursor: pointer;")
                .post-header
                  .avatar-circle
                    if post.profile_picture
                      img(src=post.profile_picture, alt=post.first_name + ' ' + post.last_name)
                    else
                      | #{post.first_name ? post.first_name[0] : ''}#{post.last_name ? post.last_name[0] : ''}
                  .post-user
                    h3= post.first_name + ' ' + post.last_name
                    p= 'Posted At: ' + post.created_at
                .post-body
                  if post.media_url
                    img.post-media(src=post.media_url, alt="Post Media")
                  h4= post.first_name + ' ' + post.last_name  
                  p= post.description
                .post-footer
                  // Like section with like count above buttons
                  .like-section
                    p.like-count #{post.likeCount} Likes
                    .button-row
                      form.like-form(action=`/api/home/${post.post_id}/like`, method="POST")
                        button.like-btn(type="submit")
                          .icon-circle X
                          span #{post.likedByUser ? 'Unlike' : 'Like'}
                      button.comment-btn
                        .icon-circle X
                        span Comment
          else
            p No posts available.

      // RIGHT SIDEBAR (unchanged)
      aside.right-sidebar
        .search-box
          form(action="/api/home/posts/search", method="GET")
            .icon-circle X
            input(type="text", name="q", placeholder="Search posts...", required)
        .widget
          h3 See what's trending
          ul
            li Lorem ipsum dolor
            li Lorem ipsum dolor
            li Lorem ipsum dolor
        .widget
          h3 Chat
          ul
            li
              .icon-circle X
              span Account Name

    // Client-side JavaScript to intercept the like form submission and update UI without redirect
    script.
      document.addEventListener('DOMContentLoaded', function() {
        const likeForms = document.querySelectorAll('.like-form');
        likeForms.forEach(form => {
          form.addEventListener('submit', async function(e) {
            e.preventDefault();
            const action = form.getAttribute('action');
            try {
              const res = await fetch(action, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                credentials: 'include'
              });
              const data = await res.json();
              if (res.ok) {
                // Update the like count text in the closest .like-section
                const likeSection = form.closest('.like-section');
                if (likeSection) {
                  const likeCountElem = likeSection.querySelector('.like-count');
                  if (likeCountElem) {
                    likeCountElem.textContent = data.likeCount + ' Likes';
                  }
                }
                // Update the button text
                const btnTextElem = form.querySelector('.like-btn span');
                if (btnTextElem) {
                  btnTextElem.textContent = data.likedByUser ? 'Unlike' : 'Like';
                }
              } else {
                console.error('Error toggling like:', data.error);
              }
            } catch (err) {
              console.error('Fetch error:', err);
            }
          });
        });
      });
